{"version":3,"sources":["logo.svg","cpn/Square.js","cpn/Board.js","cpn/Model.js","cpn/Notification.js","cpn/Game.js","App.js","index.js"],"names":["module","exports","Square","props","onClick","value","x","y","isHighLight","style","borderColor","borderWidth","borderStyle","margin","outsideStype","className","Board","size","this","onCellClick","data","highlightRange","board","i","push","key","index","row","renderBoard","Component","Row","isInRange","undefined","find","Postion","Winner","state","startIndex","endIndex","res","start","Math","min","end","max","mode","HistoryState","current","currentPostion","winner","map","inner","Notification","history","list","slice","setState","pos","curr","nextMove","renderWiner","renderHistory","Game","initBoard","notification","React","createRef","bind","onRetry","getWinnerRange","jumpTo","col","pushHistory","checkWin","startState","endState","isInSize","getValue","startIndexCal","endIndexCal","nextStep","prevStep","currentState","count","currIndex","check2Head","realSize","checkRow","checkBoard","checkCol","checkDown","checkUp","clearHistory","Array","fill","calRange","ref","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.641c451b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nconst Square = (props) => {\r\n    const {onClick, value, x, y, isHighLight} = props\r\n    let style = isHighLight ? {\r\n        borderColor: 'red',\r\n        borderWidth: 1,\r\n        borderStyle: 'solid',\r\n        margin:1 \r\n    } : {}\r\n\r\n    let outsideStype = isHighLight ? {\r\n\r\n    } : {}\r\n    return (\r\n        <button onClick={()=>{\r\n            // console.log(`Clicked on col${x} row${y}`)\r\n            onClick(x,y)\r\n        }} \r\n        className=\"square\" \r\n        style={outsideStype}>\r\n            <div style={style}>\r\n            {value}\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square;","import React, { Component } from 'react'\r\nimport Square from './Square';\r\n\r\nexport class Board extends Component {\r\n    renderBoard(size) {\r\n        const { onCellClick, data, highlightRange } = this.props\r\n        let board = []\r\n        for (var i = 0; i < size; i++) {\r\n            board.push(<Row\r\n                key={i}\r\n                size={size}\r\n                index={i}\r\n                row={data[i]}\r\n                onCellClick={onCellClick}\r\n                highlightRange = {highlightRange}\r\n            />)\r\n        }\r\n        return board\r\n    }\r\n\r\n    render() {\r\n        const { size } = this.props\r\n        return (\r\n            <div>\r\n                {this.renderBoard(size)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Row = (props) => {\r\n    const { size, index, row: data, onCellClick, highlightRange } = props;\r\n    let isInRange = (x, y) => {\r\n        return (highlightRange || []).find((value) => {\r\n            return value.x === x && value.y === y\r\n        }) !== undefined\r\n    }\r\n    let row = []\r\n    for (var i = 0; i < size; i++) {\r\n        let isHighLight = isInRange(i, index)\r\n        row.push(\r\n            <Square\r\n                key={`${i}_${index}`}\r\n                x={i}\r\n                y={index}\r\n                value={data[i]}\r\n                isHighLight={isHighLight}\r\n                onClick={(x,y) => onCellClick(x,y)}\r\n            />\r\n        )\r\n    }\r\n    return <div className=\"board-row\">{row}</div>\r\n}\r\n\r\nexport default Board;","export class Postion {\r\n    constructor(x, y) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n\r\n    isInSize(size) {\r\n        return this.x >= 0 && this.y >= 0\r\n            && this.x < size && this.y < 20\r\n    }\r\n}\r\n\r\nexport class Winner {\r\n    constructor(state) {\r\n        this.state = state\r\n        this.startIndex = undefined\r\n        this.endIndex = undefined\r\n    }\r\n\r\n    calRange() {\r\n        if (this.startIndex === undefined) return []\r\n        if (this.endIndex === undefined) return []\r\n        if (!this.endIndex instanceof Postion) return []\r\n        if (!this.startIndex instanceof Postion) return []\r\n        let res = []\r\n        if (this.startIndex.x === this.endIndex.x) {\r\n            let x = this.startIndex.x;\r\n            let start = Math.min(this.startIndex.y, this.endIndex.y)\r\n            let end = Math.max(this.startIndex.y, this.endIndex.y)\r\n            for (let i = start; i <= end; i++ ) {\r\n                res.push(new Postion(x, i))\r\n            }\r\n        } else if (this.startIndex.y === this.endIndex.y) {\r\n            let y = this.startIndex.y;\r\n            let start = Math.min(this.startIndex.x, this.endIndex.x)\r\n            let end = Math.max(this.startIndex.x, this.endIndex.x)\r\n            for (let i = start; i <= end; i++ ) {\r\n                res.push(new Postion(i, y))\r\n            }\r\n        } else {\r\n            let start = Math.min(this.startIndex.x, this.endIndex.x)\r\n            let end = Math.max(this.startIndex.x, this.endIndex.x)\r\n            let mode = this.startIndex.y < this.endIndex.y ? 1 : -1\r\n            let y = this.startIndex.y\r\n            for (let i = start; i <= end; i++ ) {\r\n                res.push(new Postion(i, y))\r\n                y += mode\r\n            }\r\n        }\r\n        return res\r\n    }    \r\n}\r\n","import React, { Component } from 'react'\r\nimport { Postion } from './Model';\r\n\r\nclass HistoryState {\r\n    constructor(data,current, currentPostion, winner) {\r\n        this.data = [...data.map(inner => [...inner])]\r\n        this.current = current;\r\n        this.currentPostion = currentPostion\r\n        this.winner = winner;\r\n    }\r\n}\r\n\r\nexport class Notification extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            history: []\r\n        }\r\n        this.index = -1;\r\n    }\r\n    pushHistory(value) {\r\n        const {history} = this.state;\r\n        let list = history;\r\n        if (this.index!==-1) {\r\n            list =  list.slice(0, this.index +1 )\r\n        }\r\n        list.push(new HistoryState(\r\n            value.board,\r\n            value.current, \r\n            value.currentPostion, \r\n            value.winner\r\n        ))\r\n        this.setState({\r\n            history: list\r\n        })\r\n    }\r\n\r\n    clearHistory() {\r\n        this.setState({\r\n            history: []\r\n        })\r\n    }\r\n\r\n    renderWiner(winner) {\r\n        if (winner !== undefined){\r\n            return <p>{`Winner is ${winner.state}`}</p>\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    onClick(value, index) {\r\n        const {onClick} = this.props;\r\n        let state = {\r\n            board: value.data,\r\n            current: value.current, \r\n            currentPostion: value.currentPostion, \r\n            winner: value.winner\r\n        }\r\n        this.index = index;\r\n        onClick(state, index)\r\n    }\r\n\r\n    renderHistory() {\r\n        const {history} = this.state;\r\n\r\n        // console.log(history)\r\n        return history.map((value, index) => {\r\n            if (value.data === undefined) return <div></div>\r\n            if (value.currentPostion === undefined || !value.currentPostion instanceof Postion) return <div></div>\r\n            let data = value.data\r\n            let pos = value.currentPostion\r\n            let curr = (data[pos.y] || [])[pos.x] || \"\"\r\n            return <li key={index}><button \r\n                className=\"history\"\r\n                onClick={() => {\r\n                    this.onClick(value, index)\r\n                }}\r\n            >{`${curr} moved on column ${pos.x} row ${pos.y}`}</button></li>\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {nextMove, winner} = this.props;\r\n        return (\r\n            <div>\r\n                {this.renderWiner(winner)}\r\n                <p>{`Next move: ${nextMove}`}</p>\r\n                <ol>{this.renderHistory()}  </ol>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Notification\r\n","import React, { Component } from 'react'\r\nimport Board from './Board';\r\nimport Notification from './Notification';\r\nimport {Winner, Postion} from './Model';\r\n\r\nexport class Game extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.size = 20\r\n        this.state = {\r\n            current: false,\r\n            board: this.initBoard(this.size),\r\n            currentPostion: new Postion(-1, -1),\r\n            history: []\r\n        }\r\n        this.notification = React.createRef()\r\n        this.onCellClick = this.onCellClick.bind(this)\r\n        this.onRetry = this.onRetry.bind(this)\r\n        this.getWinnerRange = this.getWinnerRange.bind(this)\r\n        this.jumpTo = this.jumpTo.bind(this)\r\n    }\r\n\r\n    onCellClick(col, row) {\r\n        const { board: data, current, winner } = this.state;\r\n        if (data[row][col] !== \"\" || winner !== undefined) return\r\n        data[row][col] = current ? \"x\" : \"o\"\r\n        let position = new Postion(col, row)\r\n        let state = {\r\n            board:  data, \r\n            current: !current,\r\n            currentPostion: position,\r\n            winner: winner\r\n        }\r\n        this.notification.current.pushHistory(state)\r\n        this.setState(state, () => {\r\n            let winner = this.checkWin()\r\n            if (winner !== undefined) {\r\n                this.setState({\r\n                    winner: winner\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    check2Head(data, current, startState, endState) {\r\n        if (startState.isInSize(20) && endState.isInSize(20)) {\r\n            let getValue = (data, state) => {\r\n                return (data[state.y] || [])[state.x] || \"\"\r\n            } \r\n            let start = getValue(data, startState)\r\n            let end =  getValue(data, endState)\r\n            if (start === \"\") return false\r\n            if (end === \"\") return false\r\n            if (start === end && start !== current) return true\r\n            else return false\r\n        }\r\n        return false\r\n    }\r\n\r\n    checkBoard(data, startIndexCal, endIndexCal, nextStep, prevStep) {\r\n        let currentState = \"\"\r\n        let count = \"\"\r\n        var startState = new Postion(-1, -1)\r\n        var endState = new Postion(-1, -1)\r\n        var startIndex = startIndexCal()\r\n        var endIndex = endIndexCal()\r\n        let currIndex = startIndex\r\n        let winner = new Winner(undefined)\r\n        while (true) {\r\n            let state = data[currIndex.y][currIndex.x]\r\n            if (state !== \"\" && state !== undefined) {\r\n                if (currentState !== state) {\r\n                    currentState = state\r\n                    count = 1\r\n                    startState = prevStep(currIndex)\r\n                    winner.startIndex = currIndex\r\n                } else {\r\n                    count++\r\n                }\r\n                if (count === 5) {\r\n                    endState = nextStep(currIndex)\r\n                    winner.endIndex = currIndex\r\n                    if (!this.check2Head(data, currentState, startState, endState)) {\r\n                        winner.state = currentState\r\n                        return winner\r\n                    }\r\n                }\r\n            }\r\n\r\n            currIndex = nextStep(currIndex)\r\n            if ((currIndex.x === endIndex.x && currIndex.y > endIndex.y)\r\n                || currIndex.x > endIndex.x) {\r\n                break\r\n            }\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    checkWin() {\r\n        const { board: data, currentPostion } = this.state\r\n        let col = currentPostion.x\r\n        let row = currentPostion.y\r\n        let realSize = this.size - 1\r\n        //Row\r\n        // console.log(\"Row\")\r\n\r\n        let checkRow = this.checkBoard(data, () => {\r\n            return new Postion(0, row)\r\n        }, () => {\r\n            return new Postion(realSize, row)\r\n        }, (index) => {\r\n            return new Postion(index.x + 1, row)\r\n        }, (index) => {\r\n            return new Postion(index.x - 1, row)\r\n        })\r\n        if (checkRow !== undefined) return checkRow\r\n\r\n        //Column\r\n        // console.log(\"Column\")\r\n        let checkCol = this.checkBoard(data, \r\n            () => new Postion(col, 0), \r\n            () => new Postion(col, realSize),\r\n            (index) => new Postion(col, index.y + 1),\r\n            (index) => new Postion(col, index.y - 1))\r\n        if (checkCol !== undefined) return checkCol\r\n\r\n        //LeftRightDown\r\n        // console.log(\"LeftRightDown\")\r\n        let checkDown = this.checkBoard(data, () => {\r\n            if (col > row) {\r\n                return new Postion(col - row, 0)\r\n            } else {\r\n                return new Postion(0, row - col)\r\n            }\r\n        }, () => {\r\n            if (col > row) {\r\n                return new Postion(realSize, row + realSize - col)\r\n            } else {\r\n                return new Postion(col + realSize - row, realSize)\r\n            }\r\n        }, \r\n        (index) => new Postion(index.x + 1, index.y + 1), \r\n        (index) => new Postion(index.x - 1, index.y - 1))\r\n        if (checkDown !== undefined) return checkDown\r\n\r\n        //LeftRightUp\r\n        // console.log(\"LeftRightUp\")\r\n\r\n        let checkUp = this.checkBoard(data, () => {\r\n            if (row > realSize - col) {\r\n                return new Postion(realSize - 1, col + row - realSize)\r\n            } else {\r\n                return new Postion(0, col + row)\r\n            }\r\n        }, () => {\r\n            if (row > realSize - col) {\r\n                return new Postion(col + row - realSize, realSize - 1)\r\n            } else {\r\n                return new Postion(col + row, 0)\r\n            }\r\n        }, \r\n        (index) => new Postion(index.x + 1, index.y - 1), \r\n        (index) => new Postion(index.x - 1, index.y + 1))\r\n        if (checkUp !== undefined) return checkUp\r\n        return undefined\r\n    }\r\n\r\n    onRetry() {\r\n        this.setState({\r\n            current: false,\r\n            board: this.initBoard(this.size),\r\n            currentPostion: new Postion(-1, -1),\r\n            winner: undefined\r\n        })\r\n        this.notification.current.clearHistory()\r\n    }\r\n\r\n    initBoard(size) {\r\n        return Array(size).fill(\"\").map(() => Array(size).fill(\"\"))\r\n    }\r\n\r\n    getWinnerRange() {\r\n        const { winner } = this.state;\r\n        return winner !== undefined ? winner.calRange() : []\r\n    }\r\n\r\n    jumpTo(state) {\r\n        this.setState(state)\r\n    }\r\n\r\n    render() {\r\n        const { board, current, winner } = this.state;\r\n        return (\r\n            <div className=\"game\">\r\n                <div>\r\n                    <Board\r\n                        size={this.size}\r\n                        data={board}\r\n                        highlightRange={this.getWinnerRange()}\r\n                        onCellClick={this.onCellClick}\r\n                    />\r\n                    <button className=\"retry\"\r\n                        onClick={this.onRetry}\r\n                    >\r\n                        Retry\r\n                    </button>\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <Notification\r\n                        ref={this.notification}\r\n                        nextMove={current ? \"x\" : \"o\"}\r\n                        winner={winner}\r\n                        onClick={this.jumpTo}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Game\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './cpn/Game';\nimport Board from './cpn/Board';\n\nclass App extends Component {\n \n  render() {\n    return (\n      <div className=\"App\">\n        <Game/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}